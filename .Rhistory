u <- randomUnifs[2]
lower <- 0.2
upper <- 0.5
gap <- (!((u <= upper) & (u >= lower))) * 1
gap
u <- randomUnifs
lower <- 0.2
upper <- 0.5
gap <- (!((u <= upper) & (u >= lower))) * 1
gap
indexzero <- (gap == 1) * 1:100
indexzero
gap.test(randomUnifs, 0.2, 0.5 )
p <- 0.3
p * (1 - p) ^ 0 * 33
p * (1 - p) ^ 1 * 33
a = 3
m = 127
seed = 17
randomUnifs <- vector(length = 100)
randomUnifs[1] = seed
for (i in 2:100) {
randomUnifs[i] = (a * randomUnifs[i - 1]) %% m;
}
for (i in 1:100) {
randomUnifs[i] = randomUnifs[i] / m;
}
u <- randomUnifs
lower <- 0.2
upper <- 0.5
gap <- (!((u <= upper) & (u >= lower))) * 1
gap
indexzero <- (gap == 1) * 1:100
indexzero
gap.test(randomUnifs, 0.2, 0.5)
0.5 * 0.5 ^ 0 * 19
0.5 * 0.5 ^ 0
0.5 * 0.5 ^ 1
(0.5 * 0.5 ^ 1) * 19
(0.3 * (1-0.3)^0) * 19
(0.3 * (1-0.3)^0) * 32
(0.3 * (1-0.3)^(0:10)) * 32
a = 3
m = 127
seed = 17
randomUnifs <- vector(length = 100)
randomUnifs[1] = seed
for (i in 2:100) {
randomUnifs[i] = (a * randomUnifs[i - 1]) %% m;
}
for (i in 1:100) {
randomUnifs[i] = randomUnifs[i] / m;
}
randomUnifs
which(randomUnifs >= lower && randomUnifs <= upper)
lower
upper
randomUnifs[1] >= lower
randomUnifs[1] >= lower && randomUnifs <= upper
randomUnifs[1] >= lower && randomUnifs[1] <= upper
randomUnifs[2] >= lower && randomUnifs[2] <= upper
which(randomUnifs %in% seq(0.2, 0.5, 0.000001))
which(randomUnifs %in% seq(0.2, 0.5, 0.001))
gap.test()
gap.test(rand)
gap.test(randomUnifs, 0.2, 0.5)
gaps <- 0:10
p <- 0.3
expectedFrequencies <- (p * (1 - p) ^ gaps) * 32
expectedFrequencies
gaps <- 0:10
p <- 0.3
expectedFrequencies <- (p * (1 - p) ^ gaps[1:10]) * 32
expectedFrequencies[11] <- 32 - sum(expectedFrequencies)
expectedFrequencies
observedFrequencies <- c(0, 12, 7, 2, 3, 3, 3, 0, 1, 1, 0)
gaps <- 0:10
p <- 0.3
expFrequencies <- (p * (1 - p) ^ gaps[1:10]) * 32
expFrequencies[11] <- 32 - sum(expFrequencies)
obsFrequencies <- c(0, 12, 7, 2, 3, 3, 3, 0, 1, 1, 0)
chisq <- sum( (obsFrequencies - expFrequencies)^2 / expFrequencies)
chisq
qchisq(alpha, s - 1)
s <- 32
qchisq(alpha, s - 1)
alpha <- 0.05
s <- 32
qchisq(alpha, s - 1)
chisq <- sum( (obsFrequencies - expFrequencies)^2 / expFrequencies)
alpha <- 0.05
s <- 32
qchisq(alpha, s - 1)
gap.test(randomUnifs)
testing <- gap.test(randomUnifs)
testing$statistic
testing$parameter
testing$p.value
testing$observed
gaps <- 0:10
p <- 0.3
expFrequencies <- (p * (1 - p) ^ gaps[1:10]) * 32
expFrequencies[11] <- 32 - sum(expFrequencies)
obsFrequencies <- c(0, 12, 7, 2, 3, 3, 3, 0, 1, 1, 0)
chisq <- sum( (obsFrequencies - expFrequencies)^2 / expFrequencies)
alpha <- 0.05
s <- 32
chisq # our test statistic
qchisq(alpha, s - 1) # critical value we compare to
pchisq(chisq, s â€“ 1) # the p-value
?pchisq
gaps <- 0:10
p <- 0.3
expFrequencies <- (p * (1 - p) ^ gaps[1:10]) * 32
expFrequencies[11] <- 32 - sum(expFrequencies)
obsFrequencies <- c(0, 12, 7, 2, 3, 3, 3, 0, 1, 1, 0)
chisq <- sum( (obsFrequencies - expFrequencies)^2 / expFrequencies)
alpha <- 0.05
s <- 32
chisq # our test statistic
qchisq(alpha, s - 1) # critical value we compare to
pchisq(chisq, s - 1) # the p-value
qchisq(alpha, 10)
qchisq(alpha, 11)
qchisq(alpha, 7)
gap.test()
gap.test()
gap.test
pchisq(23.57, 12)
qchisq(alpha, 12)
gaps <- 0:10
p <- 0.3
expFrequencies <- (p * (1 - p) ^ gaps[1:10]) * 32
expFrequencies[11] <- 32 - sum(expFrequencies)
obsFrequencies <- c(0, 12, 7, 2, 3, 3, 3, 0, 1, 1, 0)
chisq <- sum( (obsFrequencies - expFrequencies)^2 / expFrequencies)
alpha <- 0.05
s <- 32
chisq # our test statistic
qchisq(alpha, s - 1) # critical value we compare to
3 * 17
51 %% 127
51 / 127
delta <- 0.3
(delta * (1- delta)^0:5) * 19
(delta * (1- delta)^(0:5)) * 19
19 - sum((delta * (1- delta)^(0:5)) * 19 )
obs <- c(4,5,6,3,1,0,0)
exp <- (delta * (1- delta)^0:5) * 19
obs
exp
exp <- (delta * (1- delta)^(0:5)) * 19
exp
exp <- c(exp, 2.23)
obs
exp
sum( (obs - exp)^2 / exp )
qchisq(0.05, 18)
qchisq(0.95, 18)
qchisq(1 - 0.05/2, 18)
qchisq(0.95, 18)
qchisq(0.95, 32)
var(c(rep(1, 24), rep(0, 76)))
500*400*0.1842424/100
var(c(rep(1, 10), rep(0, 90)))
500 * 400 * 0.0909090909 / 100
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
library(knitr)
library(kableExtra)
prb0506 <- read.table(file = "prb0506.dat",header = T)
View(prb0506)
bath <- as.factor(prb0506$x1)
vigor <- as.factor(prb0506$x2)
sex <- as.factor(prb0506$x3)
response <- log(prb0506$y3)
coliform <- data.frame(bath, vigor, sex, response)
mod <- aov(response ~ bath*vigor*sex, data = coliform)
summary(mod)
coeffs <- mod$coefficients
coeffs
bath_neg <- mean(subset(coliform, bath == -1, select = response)$response)
bath_pos <- mean(subset(coliform, bath == 1, select = response)$response)
bath_neg
bath_pos
coeffs[2]
mod <- lm(response ~ bath*vigor*sex, data = coliform)
summary(mod)
library(daewr)
library(daewr)
install.packages("daewr")
library(daewr)
fullnormal(coef(mod)[-1], alpha=.025)
?fullnormal
??fullnormal
install.packages("DoE.base")
library(daewr)
installed.packages()
libary("comp")
library("comp")
install.packages("comp")
install.packages("multcomp")
install.packages("mvtnorm")
mod <- lm(response ~ bath*vigor*sex, data = coliform)
mod2 <- aov(response ~ bath*vigor*sex, data = coliform)
mod2
mod2$coefficients
mod2$model
summary(mod)
remotes::install_github('rstudio/pagedown')
pagedown::chrome_print("C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019/NinjaTemplate.html")
install.packages("pagedown")
pagedown::chrome_print("C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019/NinjaTemplate.html")
library("pagedown")
?chrome_print
pagedown::chrome_print("C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019/NinjaTemplate.Rmd")
pagedown::chrome_print("C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019/NinjaTemplate.Rmd", browser = "C:\Users\Melissa\AppData\Local\Google\Chrome\Application\chrome.exe")
pagedown::chrome_print("C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019/NinjaTemplate.Rmd", browser = "C:/Users/Melissa/AppData/Local/Google/Chrome/Application/chrome.exe")
install.packages("leaflet")
install.packages("leaflet")
library(leaflet)
install.packages("digest")
library(leaflet)
install.packages("leaflet")
library(leaflet)
install.packages("webshot")
library(webshot)
install_phantomjs()
file_name <- paste0("file://", "NinjaTemplate.html")
file_name
file_name <- paste0("file://", "C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019/NinjaTemplate.html")
file_name
webshot(file_name, "mypdf.pdf")
uninstall.packages("digest")
remove.packages("digest")
install.packages("digest")
install.packages("digest")
library(digest)
library(webshot)
file_name
webshot(file_name, "mypdf.pdf")
options(htmltools.dir.version = FALSE)
library(forecast)
install.packages("forecast")
library(forecast)
library(forecast)
d.arima <- auto.arima(AirPassengers)
d.forecast <- forecast(d.arima, level = c(95), h = 50)
autoplot(d.forecast)
?autoplot
library(quantmod)
getSymbols("AMZN", from = "2008-08-01", to = "2008-09-01")
dates <- seq(as.Date("2008-08-01"),
as.Date("2008-08-29"),
by = "days")
AMZNdf <- data.frame(dates = dates,
close = rep(NA, length(dates)))
AMZN <- as.data.frame(AMZN)
for (i in 1:length(AMZNdf$dates)) {
index <- which(rownames(AMZN) == AMZNdf$dates[i])
if (length(index) != 0) {
AMZNdf$close[i] <- AMZN$AMZN.Close[index]
}
}
plot(x = AMZNdf$dates, y = AMZNdf$close,
main = "Amazon's Daily Closing Stock Price",
xlab = "Day",
ylab = "Closing Price",
type = "b")
AMZNdf$dates
AMZNdf$close
ggplot2::ggplot(AMZNdf, aes(x = dates, y = close))
qplot(dates, close, data = AMZNdf)
library(ggplot2)
qplot(dates, close, data = AMZNdf)
ggplot(dates, close, data = AMZNdf)
qplot(dates, close, data = AMZNdf) + geom_line()
qplot(dates, close, data = AMZNdf) +
geom_line() +
xlab("Day") +
ylab("Closing Price") +
ggtitle("Amazon's Daily Closing Stock Price")
qplot(dates, close, data = AMZNdf) +
geom_line() +
xlab("Day") +
ylab("Closing Price") +
ggtitle("Amazon's Daily Closing Stock Price")
plot(x = AMZNdf$dates, y = AMZNdf$close,
main = "Amazon's Daily Closing Stock Price",
xlab = "Day",
ylab = "Closing Price",
type = "b")
qplot(dates, close, data = AMZNdf) +
geom_line() +
xlab("Day") +
ylab("Closing Price") +
ggtitle("Amazon's Daily Closing Stock Price")
qplot(dates, close, data = AMZNdf) +
geom_line() +
xlab("Day") +
ylab("Closing Price") +
ggtitle("Amazon's Daily Closing Stock Price") +
theme(plot.title = element_text(hjust = 0.5))
install.packages("DT")
install.packages("svglite")
options(htmltools.dir.version = FALSE, cache = TRUE)
library(forecast)
d.arima <- auto.arima(AirPassengers)
d.arima <- auto.arima(AirPassengers)
d.forecast <- forecast(d.arima, level = c(95), h = 50)
d.forecast$series
d.forecast$model$fitted
d.arima$fitted
autoplot(d.forecast)
?AirPassengers
autoplot(d.forecast) +
ggtitle("Mintly")
plot(d.arima)
plot(d.arima$fitted)
lines(AirPassengers)
airline <- autoplot(d.forecast) +
ggtitle("Monthly Totals of International Airline Passengers") +
xlab("Month") +
ylab("Total Number of Airline Passengers") +
theme(plot.title = element_text(hjust = 0.5),
text = element_text(size = 20)) +
geom_line()
airline
load("C:/Users/Melissa/Documents/School/Trent/Fourth Year/MATH4800/Performances/best_performance_0.20.RDa")
best_performance_0.20$`airquality Temp`
plot(airquality$Temp, type = "l",
xlab = "Day",
ylab = "Temperature (Fahrenheit)",
main = "Daily Temperature Measurements in NY")
airquality$Temp
airquality$Day
airquality$Month
airquality$Year
as.Date("1973-05-30")
as.Date("1973-5-30")
airquality_date <- paste("1973-", airquality$Month,
"-", airquality$Day, sep = "")
airquality_date
airquality_date <- as.Date(paste("1973-", airquality$Month,
"-", airquality$Day, sep = ""))
airquality_date
airquality_temp <- airquality$Temp
airquality_date <- as.Date(paste("1973-", airquality$Month,
"-", airquality$Day, sep = ""))
airqualitydf <- data.frame(airquality_temp, airquality_date)
ggplot(data = airqualitydf, aes(x = airquality_date, y = airquality_temp))
ggplot(data = airqualitydf, aes(x = airquality_date, y = airquality_temp)) +
geom_line()
sunspots
plot(sunspots)
qplot(sunspots)
qplot(sunspots) + geom_line()
str(sunspots)
sunspots[1]
names(sunspots)
time(sunspots)
sunspotsdf <- data.frame(numspots = sunspots,
date = time(sunspots))
sunspotsplot <- ggplot(data = sunspotsdf, aes(x = numspots,
y = date)) +
geom_line() +
xlab("Temperature (Fahrenheit)") +
ylab("Day") +
theme(text = element_text(size = 16))
ggsave(file = "sunspots.svg", plot = sunspotsplot)
sunspotsplot
sunspotsplot <- ggplot(data = sunspotsdf, aes(x = date,
y = numspots)) +
geom_line() +
xlab("Temperature (Fahrenheit)") +
ylab("Day") +
theme(text = element_text(size = 16))
sunspotsplot
library(tsinterp)
install.packages("tsinterp")
library(remotes)
install_github("wesleyburr/tsinterp")
library(tsinterp)
data(flux)
df <- data.frame("pent" = flux$PentOrig,
"index" = 1:length(flux$PentOrig))
smoothed_pent <- loess(pent ~ index, data = df, span = 0.05)
smoothed_pent <- predict(smoothed_pent)
library(tsinterp)
data(flux)
df <- data.frame("pent" = flux$PentOrig,
"index" = 1:length(flux$PentOrig))
smoothed_pent <- loess(pent ~ index, data = df, span = 0.05)
smoothed_pent <- predict(smoothed_pent)
plot(flux$PentOrig,
main = "Daily Noon Solar Flux Measurements (Penticton)",
xlab = "Time (Year)",
ylab = "Noon Solar Flux (SFU)",
type = "l",
xaxt = "n",
col = rgb(0, 0, 1, 0.3),
ylim = c(45, 500))
axis(side = 1, at = seq(0, 15251, length.out = 10),
labels = round(seq(1966, 2008, length.out = 10)))
lines(smoothed_pent, col = rgb(0, 0, 1, 0.8), lty = 2)
legend("topright",
legend = c("Actual",
"Smoothed"),
col = c(rgb(0, 0, 1, 0.5),
rgb(0, 0, 1, 0.8)),
lty = c(1, 2))
plot(flux$PentOrig,
main = "Daily Noon Solar Flux Measurements (Penticton)",
xlab = "Time (Year)",
ylab = "Noon Solar Flux (SFU)",
type = "l",
xaxt = "n",
col = rgb(0, 0, 1, 0.3),
ylim = c(45, 500))
axis(side = 1, at = seq(0, 15251, length.out = 10),
labels = round(seq(1966, 2008, length.out = 10)))
plot(flux$PentOrig,
main = "Daily Noon Solar Flux Measurements (Penticton)",
xlab = "Time (Year)",
ylab = "Noon Solar Flux (SFU)",
type = "l",
xaxt = "n",
col = rgb(0, 0, 1, 0.3),
ylim = c(45, 500))
axis(side = 1, at = seq(0, 15251, length.out = 10),
labels = round(seq(1966, 2008, length.out = 10)))
lines(smoothed_pent, col = rgb(0, 0, 1, 0.8), lty = 2)
legend("topright",
legend = c("Actual",
"Smoothed"),
col = c(rgb(0, 0, 1, 0.5),
rgb(0, 0, 1, 0.8)),
lty = c(1, 2))
library(tsinterp)
data(flux)
df <- data.frame("pent" = flux$PentOrig,
"index" = 1:length(flux$PentOrig))
smoothed_pent <- loess(pent ~ index, data = df, span = 0.05)
smoothed_pent <- predict(smoothed_pent)
svg("flux.svg")
plot(flux$PentOrig,
main = "",
xlab = "Time (Year)",
ylab = "Noon Solar Flux (SFU)",
type = "l",
xaxt = "n",
col = rgb(0, 0, 1, 0.3),
ylim = c(45, 500))
axis(side = 1, at = seq(0, 15251, length.out = 10),
labels = round(seq(1966, 2008, length.out = 10)))
lines(smoothed_pent, col = rgb(0, 0, 1, 0.8), lty = 2)
legend("topright",
legend = c("Actual",
"Smoothed"),
col = c(rgb(0, 0, 1, 0.5),
rgb(0, 0, 1, 0.8)),
lty = c(1, 2))
dev.off()
best_performance_0.20
load("C:/Users/Melissa/Documents/School/Trent/Fourth Year/MATH4800")
load("C:/Users/Melissa/Documents/School/Trent/Fourth Year/MATH4800H")
setwd("C:/Users/Melissa/Documents/School/Trent/Fourth Year/MATH4800H")
setwd("C:/Users/Melissa/Documents/School/Trent/Fourth Year/MATH4800")
list.files()
setwd("C:/Users/Melissa/Documents/School/Trent/Fourth Year/MATH4800/Performances")
setwd("C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019")
list.files()
setwd("C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019/Performances")
load("best_performance_0.20.RDa")
best_performance_0.20
load("performance_0.20.RDa")
performance_0.20
performance_0.20$`Nearest Neighbor`
load("performance_matrices_0.20.RDa")
performance_matrices_0.20[[1]]
setwd("C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019")
list.files
list.files()
load("/Performances/performance_matrices_0.20.RDa")
load("~/Performances/performance_matrices_0.20.RDa")
getwd()
options(htmltools.dir.version = FALSE, cache = TRUE)
load("~/Performances/performance_matrices_0.20.RDa")
getwd()
load("./Presentations/performance_matrices_0.20.RDa")
getwd()
load("~/Presentations/performance_matrices_0.20.RDa")
load("./Presentations/performance_matrices_0.20.RDa")
load("/Presentations/performance_matrices_0.20.RDa")
load("Presentations/performance_matrices_0.20.RDa")
load("~Presentations/performance_matrices_0.20.RDa")
load(paste(getwd(), "/Performances/performance_matrices_0.20.RDa", sep = ""))
getwd()
install.packages("formattable")
install.packages("dplyr")
View(performance_matrices_0.20)
View(performance_matrices_0.20[[1]])
View(performance_matrices_0.20[[1]])
my_table <- performance_matrices_0.20[[1]][c(3:5, 7:8, 12:13, 18), ]
View(my_table)
colnames(my_table) <- c("airquality", "sunspots", "flux")
View(round(my_table, 3))
View(round(my_table, 6))
rownames(my_table)
pagedown::chrome_print("C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019/VanBussel_CSSC_Talk.html")
?chrome_print
pagedown::chrome_print("C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019/VanBussel_CSSC_Talk.html", browser = ""C:/Users/Melissa/AppData/Local/Google/Chrome/Application/chrome.exe"")
pagedown::chrome_print("C:/Users/Melissa/Documents/CVs and Conferences/Conferences/SSC 2019/VanBussel_CSSC_Talk.html", browser = "C:/Users/Melissa/AppData/Local/Google/Chrome/Application/chrome.exe")
